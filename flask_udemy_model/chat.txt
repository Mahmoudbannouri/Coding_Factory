from flask import Flask, request, jsonify, render_template # type: ignore
import joblib # type: ignore
import pandas as pd # type: ignore
import numpy as np # type: ignore

# Charger les mod√®les
model = joblib.load('svm_udemy_model.pkl')
label_encoder = joblib.load('label_encoder.pkl')
tfidf = joblib.load('tfidf.pkl')
svd = joblib.load('svd.pkl')

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('chatbot.html')

@app.route('/predict', methods=['POST'])
def predict():
    try:
        # R√©cup√©rer les donn√©es du formulaire
        data = request.form
        title = data.get('title', '').strip()
        description = data.get('description', '').strip()
        
        # V√©rification des champs obligatoires
        if not title or not description:
            return jsonify({'error': 'Le titre et la description sont obligatoires.'}), 400

        # Conversion des valeurs num√©riques avec gestion des erreurs
        try:
            rating = float(data.get('rating', 0))
            reviewcount = float(data.get('reviewcount', 0))
            duration = float(data.get('duration', 0))
            lectures = int(data.get('lectures', 0))
        except ValueError as e:
            return jsonify({'error': f'Valeur num√©rique invalide: {str(e)}'}), 400

        # Pr√©traitement du texte
        combined_text = f"{title} {description}"
        tfidf_matrix = tfidf.transform([combined_text])
        tfidf_svd = svd.transform(tfidf_matrix)

        # Cr√©ation des features num√©riques
        numeric_features = pd.DataFrame([{
            'rating': rating,
            'reviewcount': reviewcount,
            'duration': duration,
            'lectures': lectures,
            'rating_to_reviews': rating / (reviewcount + 1),
            'duration_per_lecture': duration / (lectures + 1)
        }])

        # Concat√©nation avec les features textuelles
        X = pd.concat([
            numeric_features, 
            pd.DataFrame(tfidf_svd, columns=[f'tfidf_svd_{i}' for i in range(tfidf_svd.shape[1])])
        ], axis=1)

        # V√©rification des NaN et infinis
        if X.isnull().values.any() or np.isinf(X.values).any():
            X = X.replace([np.inf, -np.inf], np.nan).fillna(0)

        # Pr√©diction
        prediction = model.predict(X)[0]
        level = label_encoder.inverse_transform([prediction])[0]

        return jsonify({'predicted_level': level})

    except Exception as e:
        app.logger.error(f"Erreur lors de la pr√©diction: {str(e)}")
        return jsonify({'error': 'Une erreur est survenue lors de la pr√©diction.'}), 500

if __name__ == "__main__":
    app.run(debug=True)


















<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Chatbot - Pr√©diction Niveau Cours</title>
    <style>
        body { font-family: Arial, sans-serif; background: #f0f2f5; margin: 0; padding: 0; }
        .chat-container { max-width: 600px; margin: 50px auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
        .chat-box { margin-bottom: 20px; }
        input, textarea { width: 100%; padding: 10px; margin-top: 10px; border: 1px solid #ccc; border-radius: 5px; }
        button { background: #4CAF50; color: white; padding: 10px 20px; margin-top: 10px; border: none; border-radius: 5px; cursor: pointer; }
        button:hover { background: #45a049; }
        .response { margin-top: 20px; padding: 10px; background: #e7f5ff; border-left: 5px solid #2196F3; }
        .error { margin-top: 20px; padding: 10px; background: #ffebee; border-left: 5px solid #f44336; }
    </style>
</head>
<body>
    <div class="chat-container">
        <h2>Chatbot - Pr√©dire le Niveau du Cours üéØ</h2>
        <form id="chat-form">
            <div class="chat-box">
                <label>Titre du cours*</label>
                <textarea name="title" placeholder="Ex: Apprendre Python pour les d√©butants" required></textarea>
                
                <label>Description du cours*</label>
                <textarea name="description" placeholder="Ex: Ce cours vous apprendra les bases de Python..." required></textarea>
                
                <label>Note (rating)*</label>
                <input type="number" step="0.1" min="0" max="5" name="rating" placeholder="Ex: 4.5" required>
                
                <label>Nombre d'avis (reviewcount)*</label>
                <input type="number" min="0" name="reviewcount" placeholder="Ex: 100" required>
                
                <label>Dur√©e (heures)*</label>
                <input type="number" step="0.1" min="0" name="duration" placeholder="Ex: 10.5" required>
                
                <label>Nombre de le√ßons (lectures)*</label>
                <input type="number" min="0" name="lectures" placeholder="Ex: 50" required>
            </div>
            <button type="submit">Pr√©dire le niveau</button>
        </form>
        <div id="response" class="response" style="display:none;"></div>
        <div id="error" class="error" style="display:none;"></div>
    </div>

    <script>
        const form = document.getElementById('chat-form');
        const responseDiv = document.getElementById('response');
        const errorDiv = document.getElementById('error');

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            // Reset displays
            responseDiv.style.display = 'none';
            errorDiv.style.display = 'none';
            
            try {
                const formData = new FormData(form);
                const response = await fetch('/predict', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (!response.ok) {
                    throw new Error(result.error || 'Erreur inconnue');
                }
                
                if (result.predicted_level) {
                    responseDiv.style.display = 'block';
                    responseDiv.innerHTML = `
                        <h3>üìö R√©sultat de la pr√©diction</h3>
                        <p>Niveau pr√©dit: <strong>${result.predicted_level}</strong></p>
                    `;
                }
            } catch (error) {
                errorDiv.style.display = 'block';
                errorDiv.innerHTML = `
                    <h3>‚ùå Erreur</h3>
                    <p>${error.message}</p>
                `;
                console.error('Erreur:', error);
            }
        });
    </script>
</body>
</html>